//
//  SearchStationsViewController.swift
//  TrainTicketMachine
//
//  Created by JoÃ£o Gameiro on 28/03/18.
//  Copyright (c) 2018 JG.com. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchStationsDisplayLogic: class {
    func displayStationsList(viewModel: SearchStations.FetchStationsList.ViewModel)
    func displayFilteredStationsList(viewModel: SearchStations.FilterStationsList.ViewModel)
    func displayMatchingLettersForResultsList(viewModel: SearchStations.MatchingLettersForFilteredResults.ViewModel)
}

extension SearchStationsViewController: UISearchResultsUpdating {
    // MARK: - UISearchResultsUpdating Delegate
    func updateSearchResults(for searchController: UISearchController) {
        if !displayedMatchingLettersForResultsList.isEmpty {displayedMatchingLettersForResultsList.removeAll()}
        let inputText = searchController.searchBar.text!
        if inputText.isEmpty {
            tableView.reloadData()
            return
        }
        filterStationListForTextInput(list: displayedStationList, input: inputText)
        matchingLettersForFilteredList(list: displayedFilteredStationList, textToTrim: inputText)
    }
}

struct SearchStationsViewControllerStrings {
    static let title = "Search Station"
    static let searchBarPlaceholder = "Insert Station Name"
    static let fullStationTitle = "Full Station List"
    static let matchingStationsTitle = "Matching Stations List"
    static let matchingLettersTitle = "Matching Letters List"
    static let stationCellTitle = "StationTableViewCell"
}

class SearchStationsViewController: UIViewController, SearchStationsDisplayLogic, UITableViewDataSource {
    var interactor: SearchStationsBusinessLogic?
    var displayedStationList : [SearchStations.FetchStationsList.ViewModel.DisplayedStation] = []
    var displayedFilteredStationList : [SearchStations.FilterStationsList.ViewModel.DisplayedFilteredStation] = []
    var displayedMatchingLettersForResultsList = [String]()
    private let searchController = UISearchController(searchResultsController: nil)
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = SearchStationsInteractor()
        let presenter = SearchStationsPresenter()
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: Properties
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        // Setup the Search Controller
        navigationItem.title = SearchStationsViewControllerStrings.title
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = false
        searchController.searchBar.placeholder = SearchStationsViewControllerStrings.searchBarPlaceholder
        searchController.dimsBackgroundDuringPresentation = false
        navigationItem.searchController = searchController
        definesPresentationContext = true
        fetchStationList()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if #available(iOS 11.0, *) {
            navigationItem.hidesSearchBarWhenScrolling = false
        }
    }
    
    // MARK: - Search Helper Methods
    func searchBarIsEmpty() -> Bool {
        return searchController.searchBar.text?.isEmpty ?? true
    }
    
    func isFiltering() -> Bool {
        return searchController.isActive && !searchBarIsEmpty()
    }
    
    // MARK : Business Logic Helper Methods
    func fetchStationList() {
        let request = SearchStations.FetchStationsList.Request()
        interactor?.fetchStationsList(request: request)
    }
    
    func filterStationListForTextInput(list: [SearchStations.FetchStationsList.ViewModel.DisplayedStation], input: String) {
        let request = SearchStations.FilterStationsList.Request(stationsList: list, textInput: input)
        interactor?.filterStationsList(request: request)
    }
    
    func matchingLettersForFilteredList(list: [SearchStations.FilterStationsList.ViewModel.DisplayedFilteredStation], textToTrim: String) {
        let request = SearchStations.MatchingLettersForFilteredResults.Request(filteredResults: list, textToTrim: textToTrim)
        interactor?.matchingLettersList(request: request)
    }
    
    // MARK: Display Data Helper Methods
    func displayStationsList(viewModel: SearchStations.FetchStationsList.ViewModel) {
        displayedStationList = viewModel.displayedStation
        tableView.reloadData()
    }
    
    func displayFilteredStationsList(viewModel: SearchStations.FilterStationsList.ViewModel) {
        displayedFilteredStationList = viewModel.displayedFilteredStation
        tableView.reloadData()
    }
    
    func displayMatchingLettersForResultsList(viewModel: SearchStations.MatchingLettersForFilteredResults.ViewModel) {
        displayedMatchingLettersForResultsList = viewModel.matchingLettersList
        tableView.reloadData()
    }
    
    // MARK: - Table view data source
    func numberOfSections(in tableView: UITableView) -> Int {
        return displayedMatchingLettersForResultsList.isEmpty ? 1 : 2
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        switch section {
        case 0:
            if !isFiltering() {
                return SearchStationsViewControllerStrings.fullStationTitle
            } else {
                if displayedFilteredStationList.isEmpty {return SearchStationsViewControllerStrings.fullStationTitle}
                return displayedMatchingLettersForResultsList.isEmpty ? SearchStationsViewControllerStrings.matchingStationsTitle : SearchStationsViewControllerStrings.matchingLettersTitle
            }
        case 1:
            return SearchStationsViewControllerStrings.matchingStationsTitle
        default:
            return SearchStationsViewControllerStrings.fullStationTitle
        }
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if isFiltering() {
            return displayedFilteredStationList.isEmpty ? displayedStationList.count : displayedFilteredStationList.count
        }
        return displayedStationList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell = tableView.dequeueReusableCell(withIdentifier: SearchStationsViewControllerStrings.stationCellTitle)
        if cell == nil {
            cell = UITableViewCell(style: .value1, reuseIdentifier: SearchStationsViewControllerStrings.stationCellTitle)
        }
        var text = ""
        if !isFiltering() {
            text = displayedStationList[indexPath.row].name
        } else {
            switch indexPath.section {
            case 0:
                if displayedFilteredStationList.isEmpty {
                    text = displayedStationList[indexPath.row].name
                } else {
                    text = displayedMatchingLettersForResultsList.isEmpty ? displayedFilteredStationList[indexPath.row].name : displayedMatchingLettersForResultsList[indexPath.row]
                }
            default:
                text = displayedFilteredStationList[indexPath.row].name
            }
        }
        cell?.textLabel!.text = text
        return cell!
    }
}
